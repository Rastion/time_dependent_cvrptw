{
    "entry_point": "tdcvrptw_problem:TDCVRPTWProblem",
    "default_params": {
      "instance_file": "instances/C101.25.txt"
    },
    "problem_type": "Time Dependent CVRPTW",
    "description": "In the time-dependent capacitated vehicle routing problem with time windows (TDCVRPTW), a fleet of vehicles (with uniform capacity) must serve customers with known demands and time windows. Travel times between customers depend on the departure time, according to a discretized profile. A candidate solution is given by a partition of customers into truck routes. For each route, the arrival (end) times are computed recursively using the appropriate travel time (selected via a time-to-matrix index mapping), and lateness is measured both at each visit and on return to the depot. The lexicographic objective is to minimize total lateness, then the number of trucks used, and finally the total distance traveled.",
    "keywords": [
      "CVRPTW",
      "time-dependent",
      "vehicle routing",
      "optimization",
      "logistics"
    ],
    "data_format": {
      "instance_file": {
        "format": "Based on Solomon CVRPTW instances. The file starts with the instance name, then four tokens are skipped. Next, the number of trucks and truck capacity are given. After skipping 13 tokens, the depot coordinates are provided, then two tokens are skipped, followed by the max horizon. After one more token, the remainder of the file contains, for each customer: an index, x coordinate, y coordinate, demand, ready time, due time, and service time. (Due time is interpreted as the latest start time; the latest end is computed by adding the service time.)"
      }
    },
    "decision_variables": {
      "truck_routes": {
        "type": "list of lists of int",
        "description": "A list of truck routes, one per vehicle. Each route is an ordered list of customer indices (0-indexed). Every customer must appear in exactly one route."
      }
    },
    "objective": {
      "type": "minimization",
      "function": "Lexicographic: Total lateness, then number of trucks used, then total distance traveled",
      "description": "The objective is computed as: total_lateness + (nb_trucks_used * 1e9) + total_distance, where lateness is the sum of delays beyond the latest allowable end (including a penalty for returning home after the maximum horizon), nb_trucks_used is the number of nonempty routes, and total_distance is the sum of distances traveled (including depot-to-customer legs)."
    },
    "solution_representation": "A list of routes (each route a list of customer indices).",
    "compatible_optimizers": [
      "genetic_algorithm",
      "simulated_annealing",
      "particle_swarm",
      "tabu_search",
      "rl_optimizer"
    ]
  }
  